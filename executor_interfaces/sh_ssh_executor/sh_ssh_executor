#!/bin/bash
#
# Shell based ssh_executor
#
# SSH executor is the most useful kind of executors for APIServers. This kind 
# of executor interface it just executes given commands to the specified 
# remote host.


# tools functions
. tools.sh

# logging import and customisation
LOG_FILE=sh_ssh_executor.log
LOG_LEVEL=DEBUG
. logging.sh $LOG_FILE $LOG_LEVEL

# Check for compatibility issues before start the server is also may produce
# several aliases used by next includes (do not move this line)
check_compatibility

# database functions
. fgdb.sh

# tasks functions
. tasks.sh

# APIServer configurations, see shAPIerver.conf
. config.sh

# Queue task_id
task_id=$1

#
# Handlers
#

# Interruption; <ctrl-c>
int_handler() {
  log WARN "User interruption detected"
  status="ABORTED"
  target_status="INTERRUPTED"
  exit 0
}
trap int_handler INT KILL

# Exit 
exit_handler() {
  log INFO "Terminating bare execution on task_id: $task_id"
  update_queue_record $task_id
  cleanup_temp
}
trap exit_handler EXIT

# Error
error_handler() {
  log ERROR "Script error occurred"
  status="ABORTED"
  target_status="ERRORED"
  exit 1
}
trap error_handler ERR

#
# Functions
#

#
# SH SSH Executor Interface code
#

# Queue task_id
task_id=$1
verify_queued_task

# Retrieve queue record
case $action in
  "SUBMIT")
  # SUBMIT json file
  SUBMIT_JSON=${action_info_path}/${task_id}.json
  [ ! -f $SUBMIT_JSON ] &&\
    status="ABORTED" &&\
    log ERROR "No task description file: '"$SUBMIT_JSON"', found" &&\
    exit 1
  # Job description parameter and file presence
  job_desc=$(cat $SUBMIT_JSON |\
             jq '.application.parameters[]|select(.param_name=="jobdesc")' |\
             jq -r .param_value)
  [ "${job_desc}" = "" ] &&\
    status="ABORTED" &&\
    log ERROR "No job description specified for task id: '"$task_id"' with action: '"$action"'" &&\
    exit 1
  [ ! -f $action_info_path"/"$job_desc ] &&\
    status="ABORTED" &&\
    log ERROR "No job description: '"$action_info_path"/"$job_desc"' available for task id: '"$task_id"' with action: '"$action"'" &&\
    exit 1
  # Task arguments
  TASK_ARGS=($(cat $SUBMIT_JSON | jq .arguments[]; ))
  # Go to the action_info_path
  BARE_EXE_INFO=$action_info_path/.sh_bare_executor
  touch $BARE_EXE_INFO
  # Extract action
  SHBE_EXECUTABLE=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^executable" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)
  SHBE_ARGUMENTS=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^arguments" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)" "${TASK_ARGS[@]}
  SHBE_STDOUT=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^stdout" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)
  [ "$SHBE_STDOUT" = "" ] &&\
    SHBE_STDOUT=.stdout
  SHBE_STDERR=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^stderr" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)
  [ "$SHBE_STDERR" = "" ] &&\
    SHBE_STDERR=.stderr
  # Output files are in the form (f1, f2, ... fn)
  SHBE_OUTFILES_VAL=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^output_files" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)
  eval SHBE_OUTFILES"="$SHBE_OUTFILES_VAL
  log DEBUG "Job description"
  log DEBUG "\texecutable=$SHBE_EXECUTABLE"
  log DEBUG "\targuments=$SHBE_ARGUMENTS"
  log DEBUG "\toutput=$SHBE_STDOUT"
  log DEBUG "\terror=$SHBE_STDERR"
  log DEBUG "\toutput_files=$SHBE_OUTFILES_VAL"
  # Execute the requested job
  log DEBUG "Executing: $SHBE_EXECUTABLE $SHBE_ARGUMENTS 2>$SHBE_STDERR >$SHBE_STDOUT"
  echo "start_ts="$(ts) >> $BARE_EXE_INFO
  cd $action_info_path
  $SHBE_EXECUTABLE $SHBE_ARGUMENTS 2>$SHBE_STDERR >$SHBE_STDOUT &
  SHBE_PID=$!
  cd - >/dev/null
  status="RUNNING"
  target_status="RUNNING"
  target_id=$SHBE_PID
  echo "task_id=${SHBE_PID}" >> $BARE_EXE_INFO
  update_queue_record $task_id || exit 1 
  log DEBUG "Waiting for execution completion"
  wait $SHBE_PID
  echo "end_ts="$(ts) >> $BARE_EXE_INFO
  SHBE_RET=$?
  echo "return_code=${SHBE_RET}" >> $BARE_EXE_INFO
  log DEBUG "Exit code: $SHBE_RET"
  [ $SHBE_RET -eq 0 ] &&\
    status="DONE" &&\
    target_status="DONE" ||\
    (status="ABORTED" &&\
    target_status="ABORTED";)
  finalize_task
  ;;
  "STATUS")
  log DEBUG "Not yet implemented action: '"$action"' for task_id: '"$task_id"'"
  ;;
  "KILL")
  ;;
  *)
  log ERROR "Unknown action: '"$action"' for task_id: '"$task_id"'"
  exit 1
  ;;
esac

