#!/bin/bash
#
# Shell based ssh_executor
#
# SSH executor is the most useful kind of executors for APIServers. This kind 
# of executor interface it just executes given commands to the specified 
# remote host.
#
# Infrastructure parameters
#
# user: username of the remote user
# host: SSH remote host address
# password: SSH username' password
# sshkey: SSH private key path used to passwordlessy connect remote host
#
# One of the two parameters: password, sshkey has to be specified sshkey path
# has the priority

# tools functions
. tools.sh

# logging import and customisation
LOG_FILE=sh_ssh_executor.log
LOG_LEVEL=DEBUG
. logging.sh $LOG_FILE $LOG_LEVEL

# Check for compatibility issues before start the server is also may produce
# several aliases used by next includes (do not move this line)
check_compatibility

# database functions
. fgdb.sh

# tasks functions
. tasks.sh

# APIServer configurations, see shAPIerver.conf
. config.sh

# queue functions
.  queue.sh

#
# Handlers
#

# Interruption; <ctrl-c>
int_handler() {
  log WARN "User interruption detected"
  status="ABORTED"
  target_status="INTERRUPTED"
  exit 0
}
trap int_handler INT KILL

# Exit 
exit_handler() {
  log INFO "Terminating bare execution on task_id: $task_id"
  update_queue_record $task_id || exit 1
  cleanup_temp
}
trap exit_handler EXIT

# Error
error_handler() {
  log ERROR "Script error occurred"
  status="ABORTED"
  target_status="ERRORED"
  exit 1
}
trap error_handler ERR

#
# Functions
#

# Execute the given command to remote host
ssh() {
  executor_interfaces/${target_executor}/${target_executor}/ssh_cmd\
    "$infra_host"\
    "$infra_port"\
    "$infra_user"\
    "$infra_password"\
    "$infra_sshkey"\
    "$@"
  return $?
}

# Execute the given copy operation from/to remote host
scp() {
  executor_interfaces/${target_executor}/${target_executor}/scp_cmd\
    "$infra_host"\
    "$infra_port"\
    "$infra_user"\
    "$infra_password"\
    "$infra_sshkey"\
    "$1"\
    "$2"\
    "$3"
  return $? 
}

#
# SH SSH Executor Interface code
#

# Queue task_id
task_id=$1
verify_queued_task
[ $? -ne 0 ] &&\
  log debug "Task '"${task_id}"' verification failed" &&\
  exit 1;

# Retrieve queue record
case $action in
  "SUBMIT")
  # Job description parameter and file presence
  job_desc=$(cat $submit_json |\
             jq '.application.parameters[]|select(.param_name=="jobdesc")' |\
             jq -r .param_value)
  [ "${job_desc}" = "" ] &&\
    status="ABORTED" &&\
    log ERROR "No job description specified for task id: '"$task_id"' with action: '"$action"'" &&\
    exit 1
  [ ! -f $action_info_path"/"$job_desc ] &&\
    status="ABORTED" &&\
    log ERROR "No job description: '"$action_info_path"/"$job_desc"' available for task id: '"$task_id"' with action: '"$action"'" &&\
    exit 1
  # Task arguments
  TASK_ARGS=($(cat $submit_json | jq .arguments[]; ))
  # Go to the action_info_path
  BARE_EXE_INFO=$action_info_path/.sh_bare_executor
  touch $BARE_EXE_INFO
  # Extract action
  SHBE_EXECUTABLE=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^executable" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)
  SHBE_ARGUMENTS=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^arguments" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)" "${TASK_ARGS[@]}
  SHBE_STDOUT=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^stdout" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)
  [ "$SHBE_STDOUT" = "" ] &&\
    SHBE_STDOUT=.stdout
  SHBE_STDERR=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^stderr" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)
  [ "$SHBE_STDERR" = "" ] &&\
    SHBE_STDERR=.stderr
  # Output files are in the form (f1, f2, ... fn)
  SHBE_OUTFILES_VAL=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^output_files" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)
  eval SHBE_OUTFILES"="$SHBE_OUTFILES_VAL
  log DEBUG "Job description"
  log DEBUG "\texecutable=$SHBE_EXECUTABLE"
  log DEBUG "\targuments=$SHBE_ARGUMENTS"
  log DEBUG "\toutput=$SHBE_STDOUT"
  log DEBUG "\terror=$SHBE_STDERR"
  log DEBUG "\toutput_files=$SHBE_OUTFILES_VAL"
  # Infrastructure parameters
  get_temp INFRA_PARAMS
  $(infra_parameters > $INFRA_PARAMS) ||\
    (log ERROR "Unable to get infrastructure parameters" &&\
    STATUS="ABORTED" &&\
    exit 1;)
  infra_host=$(cat $INFRA_PARAMS | grep ^host | awk -F'\t' '{ print $2 }')
  [ "$infra_host" = "" ] &&\
    log ERROR "Missing SSH host address for task: '"${task_id}"'" &&\
    STATUS="ABORTED" &&\
    exit 1
  infra_port=$(cat $INFRA_PARAMS | grep ^port | awk -F'\t' '{ print $2 }')
  [ "$infra_port" = "" ] &&\
    log WARN "Missing SSH port number for task: '"${task_id}"', assuming 22" &&\
    infra_port=22
  infra_user=$(cat $INFRA_PARAMS | grep ^user | awk -F'\t' '{ print $2 }')
  [ "$infra_user" = "" ] &&\
    log ERROR "Missing SSH user name for task: '"${task_id}"'" &&\
    STATUS="ABORTED" &&\
    exit 1
  infra_password=$(cat $INFRA_PARAMS | grep ^password | awk -F'\t' '{ print $2 }')
  infra_sshkey=$(cat $INFRA_PARAMS | grep ^sshkey | awk -F'\t' '{ print $2 }')
  if  [ "$infra_password" = "" -a\
        "$infra_sshkey" = "" ]; then
    log ERROR "No SSH key or password specified for task: '"${task_id}"'" &&\
    STATUS="ABORTED" &&\
    exit 1
  fi
  rm_temp INFRA_PARAMS

  # Start SSH execution
  tmp_dir=/tmp
  action_info_name=$(basename $action_info_path)
  action_info_dir=$(dirname $action_info_path)
  remote_path=".ssh_executor/${action_info_name}"

  # Prepare job files archive
  cd $action_info_dir
  tar cvfz ${tmp_dir}/${action_info_name}.tar.gz $action_info_name
  cd - >/dev/null

  # Send job archive to remote and extract
  ssh "mkdir -p $remote_path"
  scp "${tmp_dir}/${action_info_name}.tar.gz" ">" "${remote_path}/${action_info_name}.tar.gz"
  ssh "cd .ssh_executor/${action_info_name} && tar xvfz ${action_info_name}.tar.gz -C . && rm ${action_info_name}.tar.gz"

  # Job description
  executable=$SHBE_EXECUTABLE
  arguments="$SHBE_ARGUMENTS"
  stdout=$SHBE_STDOUT
  stderr=$SHBE_STDERR

  # Execute command with ssh
  ssh "cd ${remote_path}/${action_info_name} && ${executable} ${arguments} >${stdout} 2>${stderr}" &
  SHBE_PID=$!
  wait $SHBE_PID
  SHBE_RET=$?

  # Get and extract job file archive from remote, cleaning up unnecessary files
  ssh "cd $remote_path && tar cvfz ${action_info_name}.tar.gz ${action_info_name}"
  scp "${tmp_dir}/${action_info_name}.tar.gz" "<" "${remote_path}/${action_info_name}.tar.gz"
  ssh "cd $remote_path && rm -f ${action_info_name}.tar.gz && rm -rf ${remote_path}/${action_info_name}"
  tar xvfz "${tmp_dir}/${action_info_name}.tar.gz" -C $action_info_dir
  rm -f "${tmp_dir}/${action_info_name}.tar.gz"

  # Check execution
  [ $SHBE_RET -eq 0 ] &&\
    status="DONE" &&\
    target_status="DONE" ||\
    (status="ABORTED" &&\
    target_status="ABORTED";)
  finalize_task || exit 1
  ;;
  "STATUS")
  log DEBUG "Not yet implemented action: '"$action"' for task_id: '"$task_id"'"
  ;;
  "KILL")
  log DEBUG "Not yet implemented action: '"$action"' for task_id: '"$task_id"'"
  ;;
  *)
  log ERROR "Unknown action: '"$action"' for task_id: '"$task_id"'"
  exit 1
  ;;
esac
