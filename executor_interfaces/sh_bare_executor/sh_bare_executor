#!/bin/bash
#
# Shell based bare_executor
#
# Bare executor is the simplest kind of executors for APIServers. This kind of
# executor interface just execute received commands in APIServer space and
# jobs are directly executed in 'target_info' directory.

# tools functions
. tools.sh

# logging import and customisation
LOG_FILE=sh_bare_executor.log
LOG_LEVEL=DEBUG
. logging.sh $LOG_FILE $LOG_LEVEL

# Check for compatibility issues before start the server is also may produce
# several aliases used by next includes (do not move this line)
check_compatibility

# database functions
. fgdb.sh

# tasks functions
. tasks.sh

# APIServer configurations, see shAPIerver.conf
. config.sh

# Queue task_id
task_id=$1

#
# Handlers
#

# Interruption; <ctrl-c>
int_handler() {
  log WARN "User interruption detected"
  status="ABORTED"
  target_status="INTERRUPTED"
  exit 0
}
trap int_handler INT KILL

# Exit 
exit_handler() {
  log INFO "Terminating bare execution on task_id: $task_id"
  update_queue_record $task_id
  cleanup_temp
}
trap exit_handler EXIT

# Error
error_handler() {
  log ERROR "Script error occurred"
  status="ABORTED"
  target_status="ERRORED"
  exit 1
}
trap error_handler ERR

#
# Functions
#

# Get queue record fields
get_queue_record() {
  TID=$1
  get_temp QUERY QRES_SETSTATUS
  prepare_sql $QUERY\
              queries/get_queue_record.sql\
              $TID
  exec_sql $QUERY > $QRES_SETSTATUS
  [ $? -ne 0 ] &&\
    log ERROR "Unable to get queue record for task_id: '"${TID}"': '"$(cat $QRES_SETSTATUS)"'" &&\
    rm_temp QUERY QRES_SETSTATUS &&\
    exit 1
  # Retrieve queue record values
  task_id=$TID
  target_id=$(cat $QRES_SETSTATUS | awk -F'\t' '{ print $2 }')
  target=$(cat $QRES_SETSTATUS | awk -F'\t' '{ print $3 }')
  action=$(cat $QRES_SETSTATUS | awk -F'\t' '{ print $4 }')
  status=$(cat $QRES_SETSTATUS | awk -F'\t' '{ print $5 }')
  target_status=$(cat $QRES_SETSTATUS | awk -F'\t' '{ print $6 }')
  retry=$(cat $QRES_SETSTATUS | awk -F'\t' '{ print $7 }')
  creation=$(cat $QRES_SETSTATUS | awk -F'\t' '{ print $8 }')
  last_change=$(cat $QRES_SETSTATUS | awk -F'\t' '{ print $9 }')
  check_ts=$(cat $QRES_SETSTATUS | awk -F'\t' '{ print $10 }')
  action_info=$(cat $QRES_SETSTATUS | awk -F'\t' '{ print $11 }')
  rm_temp QUERY QRES_SETSTATUS
  log DEBUG Queue record:
  QFIELDS=(
    "task_id"\
    "target_id"\
    "target"\
    "action"\
    "status"\
    "target_status"\
    "retry"\
    "creation"\
    "last_change"\
    "check_ts"\
    "action_info"\
  )
  for qf in ${QFIELDS[@]}; do
    eval "QVALUE=\$$qf"
    log DEBUG "\t${qf}=$(echo $QVALUE)"
  done
  QRECSUM=$(checksum_queue_record)
  PREV_QRECSUM=$QRECSUM
  log DEBUG  "Queue record checksum: $QRECSUM"
}

# Calculate queue record value checksum
checksum_queue_record() {
  get_temp CHKQREC
  for qf in ${QFIELDS[@]}; do
    eval "QVALUE=\$$qf"
    echo "${qf}=$(echo $QVALUE)" >>$CHKQREC
  done
  QRECSUM=$(cat $CHKQREC | md5sum | awk '{ print $1 }' | xargs echo)
  echo $QRECSUM
}

# Determine if queue record has changed
check_queue_record() {
  QRECSUM=$(checksum_queue_record)
  [ "$QRECSUM" = "$PREV_QRECSUM" ] &&\
    return 0
  PREV_QRECSUM=$QRECSUM
  return 1
}

# Update queue record fields
update_queue_record() {
  CHKQREC=$()
  [ $check_queue_record ] &&\
    log DEBUG "No queue record changes detected" &&\
    return
  log DEBUG "Queue record changes detected, updating db" &&\
  TID=$1
  get_temp QUERY QRES_UPDATEQREC
  prepare_sql $QUERY\
              queries/update_queue_record.sql\
              $target_id\
              $target\
              $action\
              $status\
              $target_status\
              $retry\
              $creation\
              $check_ts\
              $action_info\
              $TID 
  exec_sql $QUERY > $QRES_UPDATEQREC
  [ $? -ne 0 ] &&\
    log ERROR "Unable to update queue record for task_id: '"${TID}"': '"$(cat $QRES_UPDATEQREC)"'" &&\
    rm_temp QUERY QRES_UPDATEQREC &&\
    exit 1
  rm_temp QUERY QRES_UPDATEQREC
}

# Inesert a file entry for the given task
insert_task_file() {
  TASK_FILE_ARG=$1
  TASK_FILE_TASKID=$2
  TASK_FILE_PATH=$3
  get_temp INSQUERY INSTASKRES
  prepare_sql $INSQUERY\
              queries/insert_task_file.sql\
              $TASK_FILE_TASKID\
              $TASK_FILE_TASKID\
              $TASK_FILE_ARG\
              $TASK_FILE_PATH
  exec_sql $INSQUERY > $INSTASKRES
  [ $? -ne 0 ] &&\
    log ERROR "Unable to insert task file: '"$TASK_FILE_ARG"' for task_id: '"${TID}"': '"$(cat $INSTASKRES)"'" &&\
    rm_temp INSQUERY INSTASKRES &&\
    exit 1
  rm_temp INSQUERY INSTASKRES
}

# Update file entry for the given task
update_task_file() {
  TASK_FILE_ARG=$1
  TASK_FILE_TASKID=$2
  TASK_FILE_PATH=$3
  log DEBUG "TASK_FILE_PATH: $TASK_FILE_PATH"
  get_temp UPDQUERY UPDTASKRES
  prepare_sql $UPDQUERY\
              queries/update_task_file.sql\
              $TASK_FILE_PATH\
              $TASK_FILE_TASKID\
              $TASK_FILE_ARG
  exec_sql $UPDQUERY > $UPDTASKRES
  [ $? -ne 0 ] &&\
    log ERROR "Unable to update task file: '"$TASK_FILE_ARG"' for task_id: '"${TID}"': '"$(cat $UPDTASKRES)"'" &&\
    rm_temp UPDQUERY UPDTASKRES &&\
    exit 1
  rm_temp UPDQUERY UPDTASKRES
}

# Insert or update a task file entry
insert_or_update_task_file() {
  TASK_FILE=$1
  TASK_FILE_PATH=${action_info}/$TASK_FILE
  [ ! -f "${action_info_path}/${TASK_FILE}" ] &&\
    log ERROR "Unable to update file '"${TASK_FILE_PATH}", the file is missing" &&\
    return 1
  log DEBUG "Inserting or updating task file: '"$TASK_FILE_PATH"'"
  get_temp QUERY TASKFILECOUNTRES
  prepare_sql QUERY\
              queries/task_file_count.sql\
              $TID\
              $TASK_FILE
  exec_sql $QUERY > $TASKFILECOUNTRES
  [ $? -ne 0 ] &&\
    log ERROR "Unable to get info for task file: '"$TASK_FILE"' for task_id: '"${TID}"': '"$(cat $TASKFILECOUNTRES)"'" &&\
    rm_temp QUERY TASKFILECOUNTRES &&\
    exit 1
  # Get file count value
  FILECOUNT=$(cat $TASKFILECOUNTRES)
  rm_temp QUERY TASKFILECOUNTRES
  if [ $FILECOUNT -eq 0 ]; then
    # Insert task record
    log DEBUG "Inserting file: '"$TASK_FILE"' for task_id: '"$TID"'"
    insert_task_file "$TASK_FILE" "$TID" "$action_info"
  else 
    log DEBUG "Updating file: '"$TASK_FILE"' for task_id: '"$TID"'"
    update_task_file "$TASK_FILE" "$TID" "$action_info"
  fi
}

# Retrieve a list of registered task files
process_task_files() {
  log DEBUG Retrieving task files
  get_temp TFILESQ TASKFILESRES
  prepare_sql TFILESQ\
              queries/get_task_files.sql\
              $TID
  exec_sql $TFILESQ > $TASKFILESRES
  [ $? -ne 0 ] &&\
    log ERROR "Unable to get info for task file: '"$TASK_FILE"' for task_id: '"${TID}"': '"$(cat $TASKFILESRES)"'" &&\
    rm_temp TFILESQUERY TASKFILESRES &&\
    exit 1
  if [ -s $TASKFILESRES ]; then
    log DEBUG Updating output files for task: $TID
    while read task_file; do
      task_file_id=$(echo $task_file | awk '{ print $1 }')
      task_file_name=$(echo $task_file | awk '{ print $2 }')
      task_file_path=$(echo $task_file | awk '{ print $3 }')
      [ "$task_file_name" = "$SHBE_STDOUT" -o\
        "$task_file_name" = "$SHBE_STDERR" ] &&\
        continue 
      log DEBUG "\toutput file id: "$task_file_id" name: '"$task_file_name"' path: '"$task_file_path"'"
      insert_or_update_task_file $task_file_name 
    done < $TASKFILESRES
  else
    log DEBUG No files to update for task: $TID
  fi  
  rm_temp TFILESQ TASKFILESRES
}

# Update task status in task table
update_task_status() {
  log DEBUG Updating task status
  get_temp UPDATETASKQUERY UPDATETASKRES
  prepare_sql UPDATETASKQUERY\
              queries/update_task.sql\
              $status\
              $TID
  exec_sql $UPDATETASKQUERY > $UPDATETASKRES
  [ $? -ne 0 ] &&\
    log ERROR "Unable update task having id: '"${TID}"': "$(cat $UPDATETASKRES)"'" &&\
    rm_temp UPDATETASKQUERY UPDATETASKRES &&\
    exit 1
  rm_temp UPDATETASKQUERY UPDATETASKRES
}

# Finalize task information after its execution
finalize_task() {
  # Insert/Update error/output files if necessary
  HAS_OUT=$(echo $SHBE_STDOUT | grep "^\." | wc -l)
  [ $HAS_OUT -eq 0 ] &&\
    insert_or_update_task_file $SHBE_STDOUT ||\
    log DEBUG No output file specified
  HAS_ERR=$(echo $SHBE_STDOUT | grep "^\." | wc -l)
  [ $HAS_ERR -eq 0 ] &&\
    insert_or_update_task_file $SHBE_STDERR ||\
    log DEBUG No error file specified 
  # Update paths in task_output_file table if necessary
  process_task_files
  # Set task status
  update_task_status
}

#
# SH Bare Executor Interface code
#

# Check parameters

# Task id
[ "${task_id}" = "" ] &&\
  log ERROR "Received bare executor call without task_id" &&\
  exit 1

# Retrieve queue record elements
get_queue_record $task_id

# Action
[ "${action}" = "" ] &&\
  status="ABORTED" &&\
  log ERROR "No action specified for task id: '"$task_id"'" &&\
  exit 1

# Target info
[ "${action_info}" = "" ] &&\
  task_id="ABORTED" &&\
  log ERROR "No target info specified for task id: '"$task_id"' with action: '"$action"'" &&\
  exit 1
action_info_path=${IOSANDBOX_DIR}/$(basename ${action_info})
log debug "Action info: $action_info_path"
[ ! -d $action_info_path ] &&\
  status="ABORTED" &&\
  log ERROR "No target info directory: '"$action_info_path"' available for task id: '"$task_id"' with action: '"$action"'" &&\
  exit 1

# Retrieve queue record
case $action in
  "SUBMIT")
  # SUBMIT json file
  SUBMIT_JSON=${action_info_path}/${task_id}.json
  [ ! -f $SUBMIT_JSON ] &&\
    status="ABORTED" &&\
    log ERROR "No task description file: '"$SUBMIT_JSON"', found" &&\
    exit 1
  # Job description parameter and file presence
  job_desc=$(cat $SUBMIT_JSON |\
             jq '.application.parameters[]|select(.param_name=="jobdesc")' |\
             jq -r .param_value)
  [ "${job_desc}" = "" ] &&\
    status="ABORTED" &&\
    log ERROR "No job description specified for task id: '"$task_id"' with action: '"$action"'" &&\
    exit 1
  [ ! -f $action_info_path"/"$job_desc ] &&\
    status="ABORTED" &&\
    log ERROR "No job description: '"$action_info_path"/"$job_desc"' available for task id: '"$task_id"' with action: '"$action"'" &&\
    exit 1
  # Task arguments
  TASK_ARGS=($(cat $SUBMIT_JSON | jq .arguments[]; ))
  # Go to the action_info_path
  BARE_EXE_INFO=$action_info_path/.sh_bare_executor
  touch $BARE_EXE_INFO
  # Extract action
  SHBE_EXECUTABLE=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^executable" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)
  SHBE_ARGUMENTS=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^arguments" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)" "${TASK_ARGS[@]}
  SHBE_STDOUT=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^stdout" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)
  [ "$SHBE_STDOUT" = "" ] &&\
    SHBE_STDOUT=.stdout
  SHBE_STDERR=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^stderr" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)
  [ "$SHBE_STDERR" = "" ] &&\
    SHBE_STDERR=.stderr
  # Output files are in the form (f1, f2, ... fn)
  SHBE_OUTFILES_VAL=$(cat $action_info_path"/"$job_desc |\
                    grep -i "^output_files" |\
                    awk -F'=' '{ print $2 }' |\
                    xargs echo)
  eval SHBE_OUTFILES"="$SHBE_OUTFILES_VAL
  log DEBUG "Job description"
  log DEBUG "\texecutable=$SHBE_EXECUTABLE"
  log DEBUG "\targuments=$SHBE_ARGUMENTS"
  log DEBUG "\toutput=$SHBE_STDOUT"
  log DEBUG "\terror=$SHBE_STDERR"
  log DEBUG "\toutput_files=$SHBE_OUTFILES_VAL"
  # Execute the requested job
  log DEBUG "Executing: $SHBE_EXECUTABLE $SHBE_ARGUMENTS 2>$SHBE_STDERR >$SHBE_STDOUT"
  echo "start_ts="$(ts) >> $BARE_EXE_INFO
  cd $action_info_path
  $SHBE_EXECUTABLE $SHBE_ARGUMENTS 2>$SHBE_STDERR >$SHBE_STDOUT &
  SHBE_PID=$!
  cd - >/dev/null
  status="RUNNING"
  target_status="RUNNING"
  target_id=$SHBE_PID
  echo "task_id=${SHBE_PID}" >> $BARE_EXE_INFO
  update_queue_record $task_id
  log DEBUG "Waiting for execution completion"
  wait $SHBE_PID
  echo "end_ts="$(ts) >> $BARE_EXE_INFO
  SHBE_RET=$?
  echo "return_code=${SHBE_RET}" >> $BARE_EXE_INFO
  log DEBUG "Exit code: $SHBE_RET"
  [ $SHBE_RET -eq 0 ] &&\
    status="DONE" &&\
    target_status="DONE" ||\
    (status="ABORTED" &&\
    target_status="ABORTED";)
  finalize_task
  ;;
  "STATUS")
  log DEBUG "Not yet implemented action: '"$action"' for task_id: '"$task_id"'"
  ;;
  "KILL")
  ;;
  *)
  log ERROR "Unknown action: '"$action"' for task_id: '"$task_id"'"
  exit 1
  ;;
esac

